@{
    ViewData["Title"] = "Main Feed";
}
@using Microsoft.AspNetCore.Identity
@using System.IO
@using Microsoft.AspNetCore.Http;
@using MemeCo.Areas.Identity.Data
@model IEnumerable<MemeCo.Models.Post>
@inject UserManager<MemeCoUser> userManager
@{ 
    MemeCoUser currentUser = new MemeCoUser();
    IEnumerable<MemeCo.Models.Post> posts = Model;
    if (this.User.Identity.Name != null)
    {
            currentUser = userManager.GetUserAsync(this.User).Result;
    }
}

<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>@ViewData["Title"] - Index</title>
    <meta name="description" content="Main Feed of the Meme.co meme viewer">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Eli Hebdon u0871009">
    <meta name="keywords" content="HTML, CSS, Meme.co, memes">
    <script src="https://kit.fontawesome.com/50d38ee57a.js"></script>
</head>

<body>
    <div id="post_wrapper">
        <div id="sort-by">
            <div class="dropdown">
                <button class="btn btn-light dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @currentUser.Filter
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item" href="#" onclick="select_filter(this, '@currentUser.Id',  'Popular', event)">Popular</a>
                    <a class="dropdown-item" href="#" onclick="select_filter(this, '@currentUser.Id', 'Friends', event)">Following</a>
                    <a class="dropdown-item" href="#" onclick="select_filter(this, '@currentUser.Id', 'Fresh', event)">Fresh</a>
                </div>
            </div>
        </div>
        <div id="posts">
            @*sort model by selected filter*@
            @{
                switch (currentUser.Filter)
                {
                    case "Popular":
                        posts = posts.OrderByDescending(o => o.Likes.Count());
                        break;
                    case "Friends":
                        posts = posts.Where(o => o.User.Followers.Any(p => p.FollowerID == currentUser.Id));
                        break;
                    case "Fresh":
                        posts = posts.OrderBy(o => o.TimePosted.Millisecond);
                        break;
                }
            }
            @foreach (var post in posts)
            {

                var user = post.User;
                var imgSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(post.Meme));
                var profileSrc = String.Format("data:image/gif;base64,{0}",  Convert.ToBase64String(post.User.ProfilePicture));
                double likes = post.Likes.Where(o => o.Liked == true).Count();
                double dislikes = post.Likes.Where(o => o.Liked == false).Count();
                var likePercent = (likes > 0) ?  Math.Ceiling(likes / (likes + dislikes) * 100) + "%" : "";
                var dislikePercent = (dislikes > 0) ? Math.Ceiling(dislikes / (likes + dislikes) * 100) + "%" : "";
 
                <div class="post mx-auto">
                    <div class="card mx-auto" style="width: 40rem;">
                        <div class="card-title post-header row">
                            <img class="profile-pic rounded-circle" src="@profileSrc" width="50" height="50">
                            <p class="post-username">@user.UserName</p>
                        </div>
                        <div class="mx-auto">
                            <img class="card-img-top" src="@imgSrc" alt="Card image cap">
                        </div>
                        <div class="card-body">
                            @* Post was liked by current logged in user *@
                            @if (this.User.Identity.Name != null && post.Likes.Any(o => o.MemeCoUserID == currentUser.Id))
                            {
                                var reaction = post.Likes.Where(o => o.MemeCoUserID == currentUser.Id).First();
                                <div class="row no-gutters">
                                    <div class="like_buttons col-8">
                                        <a href="#" class="btn btn-primary" onclick="handle_change(this, '@currentUser.Id', 'true', '@post.ID', event)">
                                            @if (reaction.Liked == true)
                                            {
                                                <i id="@post.ID-like" class="fas fa-thumbs-up"></i>
                                            }
                                            else
                                            {
                                                <i id="@post.ID-like" class="far fa-thumbs-up"></i>
                                            }
                                        </a>
                                        <a href="#" class="btn btn-danger" onclick="handle_change(this, '@currentUser.Id', 'false', '@post.ID', event)">
                                            @if (reaction.Liked == false)
                                            {
                                                <i id="@post.ID-dislike" class="fas fa-thumbs-down"></i>
                                            }
                                            else
                                            {
                                                <i id="@post.ID-dislike" class="far fa-thumbs-down"></i>
                                            }
                                        </a>
                                    </div>
                                    <div class="col">
                                        <div class="progress">
                                            <div id="@post.ID-like-percent" class="progress-bar bg-primary" style="width:@likePercent" aria-valuemin="0" aria-valuemax="100">
                                                @likePercent
                                            </div>
                                            <div id="@post.ID-dislike-percent" class="progress-bar bg-danger" style="width:@dislikePercent" aria-valuemin="0" aria-valuemax="100">
                                                @dislikePercent
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <a class="num-comments">
                                    <h6>Comments <span class="badge badge-secondary">@post.Comments.Count()</span></h6>
                                </a>
                                <br />
                                <hr />
                                <p class="card-text">@post.Description</p>
                            }
                            @*User not logged in*@
                            else
                            {
                                <div class="row no-gutters">
                                    <div class="like_buttons col-8">
                                        <a href="#" class="btn btn-primary" onclick="handle_change(this, '@currentUser.Id', 'true', '@post.ID', event)">
                                            <i id="@post.ID-like" class="far fa-thumbs-up"></i>
                                        </a>
                                        <a href="#" class="btn btn-danger" onclick="handle_change(this, '@currentUser.Id', 'false', '@post.ID', event)">
                                            <i id="@post.ID-dislike" class="far fa-thumbs-down"></i>
                                        </a>
                                    </div>
                                    <div class="col">
                                        <div class="progress">
                                            <div id="@post.ID-like-percent" class="progress-bar bg-primary" style="width:@likePercent" aria-valuemin="0" aria-valuemax="100">
                                                @likePercent
                                            </div>
                                            <div id="@post.ID-dislike-percent" class="progress-bar bg-danger" style="width:@dislikePercent" aria-valuemin="0" aria-valuemax="100">
                                                @dislikePercent
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <a class="num-comments">
                                    <h6>Comments <span class="badge badge-secondary">@post.Comments.Count()</span></h6>
                                </a>
                                <br />
                                <hr />
                                <p class="card-text">@post.Description</p>
                            }

                        </div>
                    </div>
                </div>

            }
        </div>
    </div>


</body>
</html>

@section Scripts  {
    <script src="~/js/likeDislike.js"></script>
    <script src="~/js/selectFilter.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/8.11.8/sweetalert2.all.min.js"></script>

}
